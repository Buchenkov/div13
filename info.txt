1. Предварительно с помощью npm init мы создадим проект

2. Для работы с Webpack нам в первую очередь необходимо установить два пакета (webpack и webpack-cli) с помощью команды:
npm install webpack webpack-cli --save-dev

npm install babel-loader @babel/core @babel/preset-env --save-dev

- После настройки конфигурации, запусти сервер разработки:
     npx webpack serve

3. Теперь мы можем воспользоваться командой npx webpack. Эта команда будет работать без указания точки входа и названия файла вывода, 
  потому что у неё есть дефолтная конфигурация.

4. Для того, чтобы main.js подхватил эти изменения, нужно пересобрать проект, то есть снова запустить npx webpack в командной строке.

5. "build" : "webpack"
Теперь мы можем запускать вебпак с помощью скрипта npm run build.

6. Предоставление mode опции конфигурации указывает webpack соответствующим образом использовать встроенные средства оптимизации.
string = 'production': 'none' | 'development' | 'production'
Укажите mode опцию в конфигурации (webpack.config.js):
module.exports = {
  mode: 'development',
};

7. Parcel — это упаковщик для веб-приложений, который не требует настройки и прост в использовании.
  В Parcel встроен сервер разработки, который поддерживает горячую замену модулей и автоматически пересобирает приложение.  
  Горячая замена модуля (HMR) автоматически обновляет модули в браузере во время выполнения без необходимости обновления всей страницы.
  установить его с помощью: npm install parcel-bundler --dev
  После чего добавьте в package.json, чтобы запускать скрипты из консоли.

{
  "scripts": {
    "dev": "parcel <your entry file>",
    "build": "parcel build <your entry file>"
  }
}

7.1. ??? поддерживает горячую замену модулей для увеличения скорости разработки. Просто выполните команду:
  parcel index.html

Далее, добавьте следующие скрипты в package.json вашего проекта:

{
  "scripts": {
    "dev": "parcel <your entry file>",
    "build": "parcel build <your entry file>"
  }
}
Теперь вы можете запускать их из консоли:

# Для запуска в режиме разработки
yarn dev
# or
npm run dev

# Для запуска продакшен-сборки
yarn build
# or
npm run build

Если нужен сервер в продакшн режиме: В режиме продакшн Webpack не запускает сервер. 
Если вам нужно просмотреть результат продакшн сборки, вы можете использовать любой статический сервер, 
например, serve, чтобы запустить сервер из папки dist:

npx serve -s dist

чтобы запустить сервер и указать порт:

npx serve -s src -l 4000