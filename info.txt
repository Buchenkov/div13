1. Предварительно с помощью npm init мы создадим проект

2. Для работы с Webpack нам в первую очередь необходимо установить два пакета (webpack и webpack-cli) с помощью команды:
npm install webpack webpack-cli --save-dev

npm install babel-loader @babel/core @babel/preset-env --save-dev

- После настройки конфигурации, запусти сервер разработки:
     npx webpack serve

3. Теперь мы можем воспользоваться командой npx webpack. Эта команда будет работать без указания точки входа и названия файла вывода, 
  потому что у неё есть дефолтная конфигурация.

4. Для того, чтобы main.js подхватил эти изменения, нужно пересобрать проект, то есть снова запустить npx webpack в командной строке.

5. "build" : "webpack"
Теперь мы можем запускать вебпак с помощью скрипта npm run build.

6. Предоставление mode опции конфигурации указывает webpack соответствующим образом использовать встроенные средства оптимизации.
string = 'production': 'none' | 'development' | 'production'
Укажите mode опцию в конфигурации (webpack.config.js):
module.exports = {
  mode: 'development',
};

7. Parcel — это упаковщик для веб-приложений, который не требует настройки и прост в использовании.
  В Parcel встроен сервер разработки, который поддерживает горячую замену модулей и автоматически пересобирает приложение.  
  Горячая замена модуля (HMR) автоматически обновляет модули в браузере во время выполнения без необходимости обновления всей страницы.
  установить его с помощью: npm install parcel-bundler --dev
  После чего добавьте в package.json, чтобы запускать скрипты из консоли.

{
  "scripts": {
    "dev": "parcel <your entry file>",
    "build": "parcel build <your entry file>"
  }
}

7.1. ??? поддерживает горячую замену модулей для увеличения скорости разработки. Просто выполните команду:
  parcel index.html

Далее, добавьте следующие скрипты в package.json вашего проекта:

{
  "scripts": {
    "dev": "parcel <your entry file>",
    "build": "parcel build <your entry file>"
  }
}
Теперь вы можете запускать их из консоли:

# Для запуска в режиме разработки
yarn dev
# or
npm run dev

# Для запуска продакшен-сборки
yarn build
# or
npm run build

Если нужен сервер в продакшн режиме: В режиме продакшн Webpack не запускает сервер. 
Если вам нужно просмотреть результат продакшн сборки, вы можете использовать любой статический сервер, 
например, serve, чтобы запустить сервер из папки dist:

npx serve -s dist

чтобы запустить сервер и указать порт:

npx serve -s src -l 4000


Пример использования json-server
небольшой рабочий кейс.

[ol]

Установка json-server с помощью NPM (Node Package Manager).
npm install -g json-server
Создаем новую директорию для тестового проекта и размещаем в ней файл со следующим содержимым:
mkdir test-project
touch data.json
Содержимое файла data.json:

{
  "posts": [
    {
      "id": 1,
      "title": "json-server",
      "author": "typicode"
    },
    {
      "id": 2,
      "title": "test!",
      "author": "Spider_NET"
    },
    {
      "id": 3,
      "title": "test!",
      "author": "lord=of-fear"
    }
  ],
  "comments": [
    {
      "id": 1,
      "body": "some comment",
      "postId": 1
    }
  ]
}
Запускаем json-server:
json-server  data.json –w
Открываем браузер и тестируем запрос: http://localhost:3000/posts/2 на выходе должны получить наши данные в json формате.

или 
json-server --watch database.json
Флаг --watch означает, что сервер будет обновлять данные при изменениях в файле.


Husky

Пакет Husky позволяет задействовать хуки Git. Это означает, что у вас появляется возможность выполнять некие действия 
перед выполнением коммита или перед отправкой кода репозиторий.

Для того чтобы воспользоваться возможностями Husky, сначала установим этот пакет:

yarn add --dev husky

После этого добавим в package.json следующее:

"husky": {    
   "hooks": {      
     "pre-commit": "YOUR_COMMAND_HERE", 
     "pre-push": "YOUR_COMMAND_HERE"   
   }  
},

Это приведёт к тому, что перед выполнением команды commit или push будет вызван некий скрипт, 
который, например, выполняет тестирование кода или его форматирование.


+++
Установка Yarn
Чтобы установить Yarn, выполните следующие шаги:

1. Использование npm:
Если у вас установлен Node.js, то npm уже должен быть доступен на вашей системе. Вы можете установить Yarn глобально с помощью npm:

npm install -g yarn
Копировать
2. Проверка установки:
После установки убедитесь, что Yarn установлен правильно, выполнив команду:

yarn --version
Копировать
Эта команда выведет версию Yarn, если установка прошла успешно.

Установка Husky с помощью Yarn
Теперь, когда Yarn установлен, вы можете добавить Husky как dev-зависимость для вашего проекта:

yarn add --dev husky
Копировать
Настройка Husky для запуска линтера при коммите
После того как Husky установлен, вы можете настроить его для запуска линтера при каждом коммите:

Инициализируйте Husky:

npx husky install
Копировать
Это создаст папку .husky/ в вашем проекте.Копировать

Создайте файл для предкоммитного хука:

Создайте новый хук, который будет запускать линтер перед коммитом:

npx husky add .husky/pre-commit "yarn lint"
Копировать
Если линтер в вашем проекте настроен с командой yarn lint, этот хук будет автоматически запускать линтер перед каждым коммитом. Если ваша команда для линтера отличается, замените yarn lint на соответствующую команду.КопироватьКопировать

Запуск линтера
Теперь, при каждом коммите, Husky будет автоматически запускать линтер и предотвращать коммит, если линтер обнаружит ошибки.